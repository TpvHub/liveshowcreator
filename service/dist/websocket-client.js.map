{"version":3,"sources":["../src/websocket-client.js"],"names":["WebSocketClient","options","connect","bind","reconnect","sendMessageQueue","queue","ws","url","_","get","isConnected","WebSocket","config","socketServer","onopen","console","log","onclose","onerror","message","push","messageStr","JSON","stringify","send","e","length","i","autoConnect"],"mappings":";;;;;;;;AAAA;;;;AACA;;AACA;;;;;;;;IAEMA,e;AAEJ,2BAAaC,OAAb,EAAsB;AAAA;;AAEpB,SAAKC,OAAL,GAAe,KAAKA,OAAL,CAAaC,IAAb,CAAkB,IAAlB,CAAf;AACA,SAAKC,SAAL,GAAiB,KAAKA,SAAL,CAAeD,IAAf,CAAoB,IAApB,CAAjB;AACA,SAAKE,gBAAL,GAAwB,KAAKA,gBAAL,CAAsBF,IAAtB,CAA2B,IAA3B,CAAxB;;AAEA,SAAKG,KAAL,GAAa,EAAb,CANoB,CAMJ;AAChB,SAAKC,EAAL,GAAU,IAAV;AACA,SAAKC,GAAL,GAAWC,iBAAEC,GAAF,CAAMT,OAAN,EAAe,KAAf,CAAX;AACA,SAAKU,WAAL,GAAmB,KAAnB;;AAEA,QAAIF,iBAAEC,GAAF,CAAMT,OAAN,EAAe,aAAf,CAAJ,EAAmC;AACjC,WAAKC,OAAL;AACD;AACF;;;;8BAEU;AAAA;;AAET,UAAI,KAAKS,WAAT,EAAsB;AACpB;AACD;;AAED,WAAKJ,EAAL,GAAU,IAAIK,aAAJ,CAAc,KAAKJ,GAAL,GAAW,KAAKA,GAAhB,GAAsBK,eAAOC,YAA3C,CAAV;;AAEA,WAAKP,EAAL,CAAQQ,MAAR,GAAiB,YAAM;;AAErBC,gBAAQC,GAAR,CAAY,sBAAZ;AACA,cAAKN,WAAL,GAAmB,IAAnB;AACA;;AAEA,cAAKN,gBAAL;AACD,OAPD;AAQA,WAAKE,EAAL,CAAQW,OAAR,GAAkB,YAAM;AACtBF,gBAAQC,GAAR,CAAY,cAAZ;AACA,cAAKN,WAAL,GAAmB,KAAnB;AACA,cAAKP,SAAL;AAED,OALD;AAMA,WAAKG,EAAL,CAAQY,OAAR,GAAkB,YAAM;AACtB,cAAKR,WAAL,GAAmB,KAAnB;AACA,cAAKP,SAAL;;AAEAY,gBAAQC,GAAR,CAAY,kBAAZ;AACD,OALD;AAMD;;;gCAEY;AACXD,cAAQC,GAAR,CAAY,oBAAZ;AACA,WAAKf,OAAL;AACD;;;yBAEKkB,O,EAAS;AACb,UAAI,CAAC,KAAKT,WAAV,EAAuB;AACrB;AACA,aAAKL,KAAL,CAAWe,IAAX,CAAgBD,OAAhB;AACD;AACD,UAAI;AACF,YAAME,aAAaC,KAAKC,SAAL,CAAeJ,OAAf,CAAnB;AACA,aAAKb,EAAL,CAAQkB,IAAR,CAAaH,UAAb;AACD,OAHD,CAGE,OAAOI,CAAP,EAAU;AACVV,gBAAQC,GAAR,CAAY,mCAAZ;AACD;AACF;;;uCAEmB;AAClB,UAAI,KAAKX,KAAL,CAAWqB,MAAX,KAAsB,CAA1B,EAA6B;AAC3B;AACD;AACD,WAAK,IAAIC,IAAI,CAAb,EAAgBA,IAAI,KAAKtB,KAAL,CAAWqB,MAA/B,EAAuCC,GAAvC,EAA4C;AAC1C,YAAMR,UAAU,KAAKd,KAAL,CAAWsB,CAAX,CAAhB;AACA,YAAIR,OAAJ,EAAa;AACX,eAAKK,IAAL,CAAU,KAAKnB,KAAL,CAAWsB,CAAX,CAAV;AACA,iBAAO,KAAKtB,KAAL,CAAWsB,CAAX,CAAP;AACD;AAEF;AACF;;;;;;kBAIY,IAAI5B,eAAJ,CAAoB,EAAC6B,aAAa,IAAd,EAApB,C","file":"websocket-client.js","sourcesContent":["import WebSocket from 'uws'\nimport { config } from './config'\nimport _ from 'lodash'\n\nclass WebSocketClient {\n\n  constructor (options) {\n\n    this.connect = this.connect.bind(this)\n    this.reconnect = this.reconnect.bind(this)\n    this.sendMessageQueue = this.sendMessageQueue.bind(this)\n\n    this.queue = [] // keep query sending\n    this.ws = null\n    this.url = _.get(options, 'url')\n    this.isConnected = false\n\n    if (_.get(options, 'autoConnect')) {\n      this.connect()\n    }\n  }\n\n  connect () {\n\n    if (this.isConnected) {\n      return\n    }\n\n    this.ws = new WebSocket(this.url ? this.url : config.socketServer)\n\n    this.ws.onopen = () => {\n\n      console.log('Connected to server.')\n      this.isConnected = true\n      // after connected we may need check queue and send\n\n      this.sendMessageQueue()\n    }\n    this.ws.onclose = () => {\n      console.log('Disconnected')\n      this.isConnected = false\n      this.reconnect()\n\n    }\n    this.ws.onerror = () => {\n      this.isConnected = false\n      this.reconnect()\n\n      console.log('Connection error')\n    }\n  }\n\n  reconnect () {\n    console.log('Begin reconnecting')\n    this.connect()\n  }\n\n  send (message) {\n    if (!this.isConnected) {\n      // keep message to queue\n      this.queue.push(message)\n    }\n    try {\n      const messageStr = JSON.stringify(message)\n      this.ws.send(messageStr)\n    } catch (e) {\n      console.log('An error convert object to string')\n    }\n  }\n\n  sendMessageQueue () {\n    if (this.queue.length === 0) {\n      return\n    }\n    for (let i = 0; i < this.queue.length; i++) {\n      const message = this.queue[i]\n      if (message) {\n        this.send(this.queue[i])\n        delete this.queue[i]\n      }\n\n    }\n  }\n\n}\n\nexport default new WebSocketClient({autoConnect: true})"]}