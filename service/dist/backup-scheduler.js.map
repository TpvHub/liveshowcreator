{"version":3,"sources":["../src/backup-scheduler.js"],"names":["TIMEZONE","DATABASE_BACKUP","CODE_BACKUP","schedulers","time","label","job","backup","id","key","manually","snapshot","backupType","createdAt","Date","now","updatedAt","status","BackupScheduler","start","bind","_this","forEach","schedule","index","CronJob","backupJob","handleBackup"],"mappings":";;;;;;;;;AAAA;;AACA;;;;;;;;AAEA,IAAMA,WAAW,kBAAjB;AACO,IAAMC,4CAAkB,UAAxB;AACA,IAAMC,oCAAc,MAApB;;AAEP,IAAIC,aAAa,CACf;AACEC,QAAM,eADR;AAEEC,SAAO,wBAFT;AAGEC,OAAK,IAHP;AAIEC,UAAQ;AACNC,QAAI,EADE;AAENC,SAAK,EAFC;AAGNC,cAAU,KAHJ;AAINC,cAAU,wBAJJ;AAKNC,gBAAYX,eALN;AAMNY,eAAWC,KAAKC,GAAL,EANL;AAONC,eAAWF,KAAKC,GAAL,EAPL;AAQNE,YAAQ;AARF;AAJV,CADe,CAAjB;;IAiCqBC,e;AAEnB,2BAAaX,MAAb,EAAqB;AAAA;;AAEnB,SAAKA,MAAL,GAAcA,MAAd;AACA,SAAKY,KAAL,GAAa,KAAKA,KAAL,CAAWC,IAAX,CAAgB,IAAhB,CAAb;AACD;;;;4BAEQ;;AAEP,UAAIC,QAAQ,IAAZ;;AAEAlB,iBAAWmB,OAAX,CAAmB,UAACC,QAAD,EAAWC,KAAX,EAAqB;;AAEtC,YAAIlB,MAAM,IAAImB,aAAJ,CAAYF,SAASnB,IAArB,EAA2B,YAAY;;AAE7C,cAAIsB,YAAYH,SAAShB,MAAzB;AACAmB,oBAAUlB,EAAV,GAAe,kBAAf;AACAkB,oBAAUb,SAAV,GAAsBC,KAAKC,GAAL,EAAtB;AACAW,oBAAUV,SAAV,GAAsBF,KAAKC,GAAL,EAAtB;;AAEAM,gBAAMd,MAAN,CAAaoB,YAAb,CAA0BD,SAA1B;AAED,SATO,EASL,YAAY;AACb;AACD,SAXO,EAYR,IAZQ,EAaR1B,QAbQ,CAaC;AAbD,SAAV;;AAgBAG,mBAAWqB,KAAX,EAAkBlB,GAAlB,GAAwBA,GAAxB,CAlBsC,CAkBX;AAE5B,OApBD;AAsBD;;;;;;kBAlCkBY,e","file":"backup-scheduler.js","sourcesContent":["import { CronJob } from 'cron'\nimport uuid from 'uuid/v1'\n\nconst TIMEZONE = 'America/New_York'\nexport const DATABASE_BACKUP = 'database'\nexport const CODE_BACKUP = 'code'\n\nlet schedulers = [\n  {\n    time: '00 00 * * * *',\n    label: 'Hourly database backup',\n    job: null,\n    backup: {\n      id: '',\n      key: '',\n      manually: false,\n      snapshot: 'Hourly database backup',\n      backupType: DATABASE_BACKUP,\n      createdAt: Date.now(),\n      updatedAt: Date.now(),\n      status: 'pending'\n    }\n  },\n  /*{\n    time: '00 59 23 * * *', // every middle night\n    label: 'Daily code backup',\n    job: null,\n    backup: {\n      id: uuid(),\n      key: '',\n      manually: false,\n      snapshot: 'Daily code backup',\n      backupType: CODE_BACKUP,\n      createdAt: Date.now(),\n      updatedAt: Date.now(),\n      status: 'pending'\n    }\n  }*/\n]\n\nexport default class BackupScheduler {\n\n  constructor (backup) {\n\n    this.backup = backup\n    this.start = this.start.bind(this)\n  }\n\n  start () {\n\n    let _this = this\n\n    schedulers.forEach((schedule, index) => {\n\n      let job = new CronJob(schedule.time, function () {\n\n          let backupJob = schedule.backup\n          backupJob.id = uuid()\n          backupJob.createdAt = Date.now()\n          backupJob.updatedAt = Date.now()\n\n          _this.backup.handleBackup(backupJob)\n\n        }, function () {\n          /* This function is executed when the job stops */\n        },\n        true,\n        TIMEZONE /* Time zone of this job. */\n      )\n\n      schedulers[index].job = job//adding this job to class in case we want to stop the schedule.\n\n    })\n\n  }\n\n}"]}