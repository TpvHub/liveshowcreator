{"version":3,"sources":["../src/backup.js"],"names":["AWS","config","update","accessKeyId","s3","secretAccessKey","region","S3","maxFiles","s3Objects","Backup","app","routers","bind","error","response","restoreDatabase","restoreSourceCode","extract","listObjects","handleBackup","backups","OrderedMap","errors","logs","restoreProcess","params","callback","_this","err","data","console","log","contents","Contents","concat","IsTruncated","Marker","length","Key","backup","set","id","doBackup","info","ws","send","action","payload","topic","message","success","get","req","res","s3Parms","Bucket","bucket","MaxKeys","Delimiter","s3Items","objects","_","each","item","obj","getObjectStructFromFileName","size","Size","tag","replace","ETag","status","backupId","backupFromCache","push","pendingItems","filter","i","clear","forEach","items","limit","offset","sort","itemA","itemB","a","b","count","post","body","backupType","key","snapshot","manually","DATABASE_BACKUP","createdAt","toDate","updatedAt","json","force","backupObject","find","setWith","doRestore","code","cb","CODE_BACKUP","fullRestore","tmpDirGenerate","tmp","dirSync","dir","tmpDir","prefix","unsafeCleanup","tmpDownloadDir","name","filePath","path","join","file","fs","createWriteStream","on","unlinkSync","arg","mongodb","restoreMongoProcess","stderr","removeCallback","Error","getObject","createReadStream","pipe","existsSync","webDir","mkdirSync","backupDatabase","remove","backupSourceCode","fullBackup","fileName","createFileName","Date","now","toString","exportDatabaseProcess","compress","upload","Body","putObject","ext","names","space","underSpace","trim","unix","filename","splitUnderScore","split","moment","pathToArchive","directoryPath","pack","tar","extractProcess"],"mappings":"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","file":"backup.js","sourcesContent":["import _ from 'lodash'\nimport uuid from 'uuid/v1'\nimport AWS from 'aws-sdk'\nimport tar from 'tar-fs'\nimport tmp from 'tmp'\nimport fs from 'fs'\nimport { spawn } from 'child_process'\nimport path from 'path'\nimport { OrderedMap } from 'immutable'\nimport moment from 'moment'\nimport { s3, config } from './config'\nimport ws from './websocket-client'\nimport { DATABASE_BACKUP } from './backup-scheduler'\n\nAWS.config.update({\n  accessKeyId: s3.accessKeyId,\n  secretAccessKey: s3.secretAccessKey,\n  region: s3.region,\n})\n\nconst S3 = new AWS.S3()\nconst maxFiles = 2000\n\nlet s3Objects = []\n\nexport default class Backup {\n\n  constructor (app) {\n\n    this.routers = this.routers.bind(this)\n    this.error = this.error.bind(this)\n    this.response = this.response.bind(this)\n    this.restoreDatabase = this.restoreDatabase.bind(this)\n    this.restoreSourceCode = this.restoreSourceCode.bind(this)\n    this.extract = this.extract.bind(this)\n    this.listObjects = this.listObjects.bind(this)\n\n    this.handleBackup = this.handleBackup.bind(this)\n\n    this.app = app\n    this.backups = new OrderedMap()\n    this.errors = []\n    this.logs = []\n    this.restoreProcess = null\n  }\n\n  listObjects (params, callback) {\n\n    const _this = this;\n\n    S3.listObjects(params, function (err, data) {\n      if (err) {\n        console.log('An error list object', err)\n        return callback(err)\n      }\n      let contents = data.Contents\n      s3Objects = s3Objects.concat(contents)\n      if (data.IsTruncated) {\n        // Set Marker to last returned key\n        params.Marker = contents[contents.length - 1].Key\n        _this.listObjects(params, callback)\n      } else {\n        callback(null, s3Objects)\n      }\n    })\n  }\n\n  handleBackup (backup) {\n\n    this.backups = this.backups.set(backup.id, backup)\n\n    this.doBackup(backup, (err, info) => {\n\n      ws.send({\n        action: 'broadcast',\n        payload: {\n          topic: `service/backup/${backup.id}`,\n          message: {\n            success: !err,\n            data: info ? info : null\n          }\n        }\n      })\n\n    })\n\n  }\n\n  routers () {\n    const app = this.app\n\n    /**\n     * List all backups\n     */\n    app.get('/backups', (req, res) => {\n\n      s3Objects = []\n\n      const s3Parms = {\n        Bucket: s3.bucket,\n        MaxKeys: maxFiles,\n        Marker: '',\n        Delimiter: '/'\n      }\n\n      let s3Items = []\n\n      this.listObjects(s3Parms, (err, objects) => {\n        if (err) {\n          return this.error(res, err)\n        }\n\n        // let find and clear all backups is not pending\n        _.each(objects, (item) => {\n          // let destruct from item file name.\n          let obj = this.getObjectStructFromFileName(item.Key)\n          // we also need file size to display.\n          obj.size = item.Size\n          // add ETag to object in case use later to request to s3\n          obj.tag = _.replace(item.ETag, /\"/g, '')\n          obj.status = 'Done'\n\n          const backupId = _.get(obj, 'id')\n          const backupFromCache = this.backups.get(backupId)\n          if (backupFromCache) {\n            obj = backupFromCache\n          }\n\n          s3Items.push(obj)\n\n        })\n\n        const pendingItems = this.backups.filter((i) => i.status === 'Pending' || i.status === 'Restoring')\n\n        // clear\n        if (s3Items) {\n          this.backups = this.backups.clear()\n        }\n\n        if (pendingItems.size) {\n          pendingItems.forEach((item) => {\n            this.backups = this.backups.set(item.id, item)\n          })\n        }\n\n        // add again\n        _.each(s3Items, (obj) => {\n          this.backups = this.backups.set(_.get(obj, 'id'), obj)\n        })\n\n        let items = []\n        const limit = _.get(req, 'query.limit', 20)\n        const offset = _.get(req, 'query.skip', 0)\n\n        let i = 0\n        this.backups.sort((itemA, itemB) => {\n\n          const a = _.get(itemA, 'createdAt')\n          const b = _.get(itemB, 'createdAt')\n\n          if (a < b) { return 1 }\n          if (a > b) { return -1 }\n          if (a === b) { return 0 }\n\n        }).forEach((item) => {\n          if (items.length < limit && i >= offset) {\n            items.push(item)\n          }\n          i++\n        })\n\n        this.response(res, {\n          items: items,\n          count: this.backups.size\n        }, 200)\n\n      })\n\n    })\n\n    /**\n     * Router for create new backup\n     */\n    app.post('/backups', (req, res) => {\n\n      let data = req.body\n\n      if (typeof data === 'undefined' || typeof data.backupType === 'undefined' || data.backupType === null) {\n        return this.error(res, 'An error', 503)\n      }\n\n      const id = data.id ? data.id : uuid()\n\n      let backup = {\n        id: id,\n        key: '',\n        snapshot: data.snapshot ? data.snapshot : '',\n        manually: data.manually ? data.manually : true,\n        backupType: data.backupType ? data.backupType : DATABASE_BACKUP,\n        createdAt: data.createdAt ? data.createdAt : moment().toDate(),\n        updatedAt: data.updatedAt ? data.updatedAt : moment().toDate(),\n        status: 'Pending'\n      }\n\n      this.handleBackup(backup)\n      return res.json(backup)\n\n    })\n\n    /**\n     * Handle restore backup\n     */\n\n    app.post('/backups/restore', (req, res) => {\n\n      const data = req.body\n\n      const force = _.get(data, 'force', false)\n      const key = _.get(data, 'key', null)\n      const id = _.get(data, 'id', uuid())\n      if (this.restoreProcess && !force) {\n        this.error(res, 'Another restore process is running.')\n      }\n      if (!key) {\n        return this.error(res, 'File not found')\n      }\n\n      let backupObject = this.getObjectStructFromFileName(key)\n\n      let backup = this.backups.find((item) => item.key === key)\n      if (!backup) {\n\n        backup = backupObject\n        backup = _.setWith(backup, 'id', id)\n      }\n\n      backup = _.setWith(backup, 'status', 'Restoring')\n      this.backups = this.backups.set(backup.id, backup)\n\n      this.doRestore(backup, (err, info) => {\n\n        ws.send({\n          action: 'broadcast',\n          payload: {\n            topic: `service/restore/${id}`,\n            message: {\n              success: !err,\n              data: info ? info : null\n            }\n          }\n        })\n\n      })\n\n      return res.json(backup)\n\n    })\n\n  }\n\n  /**\n   * Handle success response\n   * @param res\n   * @param data\n   * @param code\n   * @returns {*}\n   */\n  response (res, data, code = 200) {\n\n    return res.status(code ? code : 200).json(data)\n  }\n\n  /**\n   * Handle error response\n   * @param res\n   * @param message\n   * @param code\n   */\n  error (res, message = 'An error', code = 400) {\n\n    return res.status(code ? code : 400).json({\n      error: message\n    })\n  }\n\n  init () {\n\n    this.routers()\n  }\n\n  doRestore (backupObject, cb = () => {}) {\n    if (backupObject.backupType === DATABASE_BACKUP) {\n      console.log('Begin restore database')\n\n      this.restoreDatabase(backupObject, (err, success) => {\n        console.log('The restore status: ', err, success)\n        if (err) {\n\n          this.log('Unable restore the database.')\n\n          backupObject.status = 'Done'\n          this.backups = this.backups.set(backupObject.id, backupObject)\n\n          cb(err)\n        }\n        if (err === null && success) {\n          // success\n          this.restoreProcess = null\n          this.log('Restore database successful.', 'success')\n\n          backupObject.status = 'Done'\n          this.backups = this.backups.set(backupObject.id, backupObject)\n          cb(null, backupObject)\n        }\n      })\n    } else if (backupObject.backupType === CODE_BACKUP) {\n      this.restoreSourceCode(backupObject, (err, success) => {\n\n        console.log('Restore source code status', err, success)\n        if (err) {\n          this.log('An error restore source code snapshot: ' + backupObject.snapshot)\n          backupObject.status = 'Done'\n          this.backups = this.backups.set(backupObject.id, backupObject)\n\n          cb(err)\n        }\n        if (err === null && success) {\n          this.restoreProcess = null\n          this.log('Restore source code successful.', 'success')\n          backupObject.status = 'Done'\n          this.backups = this.backups.set(backupObject.id, backupObject)\n\n          cb(null, backupObject)\n        }\n\n      })\n    } else {\n      this.fullRestore(backupObject)\n    }\n  }\n\n  /**\n   * Restore database\n   * @param backup\n   * @param callback\n   */\n  restoreDatabase (backup, callback) {\n\n    let params = {\n      Bucket: s3.bucket,\n      Key: backup.key\n    }\n\n    let tmpDirGenerate = tmp.dirSync({dir: config.tmpDir, prefix: 'livex-restore', unsafeCleanup: true})\n    let tmpDownloadDir = tmpDirGenerate.name\n    let filePath = path.join(tmpDownloadDir, backup.key)\n    let file = fs.createWriteStream(filePath)\n\n    const _this = this\n    file.on('close', function () {\n      // now need extract the database file\n      _this.extract(filePath, tmpDownloadDir, (err, success) => {\n        if (err) {\n          if (callback) {\n            return callback(err)\n          }\n        } else {\n          // remove the file\n          fs.unlinkSync(filePath)\n\n          let arg = ['--drop', '--db', config.mongodb, path.join(tmpDownloadDir, config.mongodb)]\n          let restoreMongoProcess = spawn('mongorestore', arg)\n\n          restoreMongoProcess.stderr.on('data', (data) => {\n\n          })\n\n          restoreMongoProcess.on('exit', (code) => {\n            if (code === 0) {\n              tmpDirGenerate.removeCallback()\n              return callback(null, true)\n            } else {\n              if (callback) {\n                return callback(new Error('An error restore the database with code: ', code))\n              }\n            }\n          })\n\n        }\n      })\n    })\n    S3.getObject(params).createReadStream().on('error', function (err) {\n      return callback(err)\n    }).pipe(file)\n  }\n\n  /**\n   * Restore source code\n   * @param backup\n   * @param callback\n   */\n  restoreSourceCode (backup, callback) {\n\n    let params = {\n      Bucket: s3.bucket,\n      Key: backup.key\n    }\n\n    let tmpDirGenerate = tmp.dirSync({dir: config.tmpDir, prefix: 'livex-restore-code', unsafeCleanup: true})\n    let tmpDownloadDir = tmpDirGenerate.name\n    let filePath = path.join(tmpDownloadDir, backup.key)\n    let file = fs.createWriteStream(filePath)\n\n    const _this = this\n    file.on('close', function () {\n      // now need extract the database file\n      if (!fs.existsSync(config.webDir)) {\n        fs.mkdirSync(config.webDir)\n      }\n\n      _this.extract(filePath, config.webDir, (err, success) => {\n        if (err) {\n          if (callback) {\n            return callback(err)\n          }\n        } else {\n          // remove the file\n          fs.unlinkSync(filePath)\n          tmpDirGenerate.removeCallback()\n          if (callback) {\n            callback(null, true)\n          }\n\n        }\n      })\n    })\n    S3.getObject(params).createReadStream().on('error', function (err) {\n      return callback(err)\n    }).pipe(file)\n\n  }\n\n  /**\n   * Full Restore\n   * @param backup\n   */\n  fullRestore (backup) {\n\n  }\n\n  /**\n   * Begin backup\n   * @param backup\n   * @param cb\n   */\n  doBackup (backup, cb = () => {}) {\n\n    if (backup.backupType === DATABASE_BACKUP) {\n      this.backupDatabase(backup, (err, info) => {\n        console.log('backup database process:', err, info)\n        if (err) {\n          this.log('Backup database error')\n          // remove backup if it is error\n          this.backups = this.backups.remove(backup.id)\n          this.errors.push(backup)\n\n          cb('Backup Error')\n\n        } else {\n\n          this.log('Backup database successful. - ' + backup.snapshot, 'success')\n          backup.status = 'Done'\n          backup.key = info.key\n          this.backups = this.backups.set(backup.id, backup)\n\n          cb(null, backup)\n        }\n\n      })\n    } else if (backup.backupType === CODE_BACKUP) {\n      this.backupSourceCode(backup, (err, success) => {\n        console.log('Code backup status:', err, success)\n        if (err) {\n          this.log('Backup source Code error')\n          this.backups = this.backups.remove(backup.id)\n          this.errors.push(backup)\n          cb(err)\n\n        } else {\n          this.log('Backup source code successful. - ' + backup.snapshot, 'success')\n          backup.status = 'Done'\n          backup.key = success.key\n          this.backups = this.backups.set(backup.id, backup)\n          cb(null, backup)\n        }\n\n      })\n    } else {\n      this.fullBackup(backup)\n    }\n  }\n\n  /**\n   * Backup database\n   * @param backup\n   * @param callback\n   */\n  backupDatabase (backup, callback = () => {}) {\n\n    let tmpDirGenerate = tmp.dirSync({dir: config.tmpDir, prefix: 'livex-', unsafeCleanup: true})\n    let tmpDir = tmpDirGenerate.name\n    let fileName = this.createFileName(backup, 'tar')\n    let dir = path.join(tmpDir, Date.now().toString())\n\n    let arg = ['--db', config.mongodb, '--out', dir]\n    let exportDatabaseProcess = spawn('mongodump', arg)\n    let filePath = path.join(tmpDir, fileName)\n\n    exportDatabaseProcess.on('exit', (code) => {\n\n      if (code === 0) {\n        this.compress(filePath, dir, (err, success) => {\n\n          if (err) {\n            if (callback) {\n              return callback(err)\n            }\n\n          } else {\n            this.upload(fileName, filePath, (err, data) => {\n              // delete the file\n              tmpDirGenerate.removeCallback()\n\n              if (err) {\n                if (callback) {\n                  return callback(err)\n                }\n\n              } else {\n                if (callback) {\n                  return callback(null, {\n                    key: fileName\n                  })\n                }\n              }\n\n            })\n          }\n        })\n\n      } else {\n        if (callback) {\n          return callback(new Error('An error backup with code:', code))\n        }\n      }\n    })\n\n  }\n\n  /**\n   * Backup source code\n   * @param backup\n   */\n  backupSourceCode (backup, callback) {\n\n    let tmpDirGenerate = tmp.dirSync({dir: config.tmpDir, prefix: 'livex-code', unsafeCleanup: true})\n    let tmpDir = tmpDirGenerate.name\n    let fileName = this.createFileName(backup, 'tar')\n    let dir = path.join(config.webDir)\n    let filePath = path.join(tmpDir, fileName)\n    console.log('Beginning compress source code', filePath, dir)\n    this.compress(filePath, dir, (err, success) => {\n\n      console.log('compress source code: ', filePath, err, success)\n\n      if (err) {\n        if (callback) {\n          return callback(err)\n        }\n      } else {\n        console.log('Begining upload source code')\n        this.upload(fileName, filePath, (err, data) => {\n          // delete the file\n          console.log('Upload source code status', err, data)\n          tmpDirGenerate.removeCallback()\n\n          if (err) {\n            if (callback) {\n              return callback(err)\n            }\n\n          } else {\n            if (callback) {\n              return callback(null, data)\n            }\n          }\n\n        })\n      }\n\n    })\n\n  }\n\n  fullBackup (backup) {\n\n  }\n\n  log (message, status = 'error') {\n    this.logs.push({\n      message: message,\n      status: status\n    })\n  }\n\n  upload (fileName, filePath, callback) {\n    let file = fs.createReadStream(filePath)\n    let params = {Bucket: s3.bucket, Key: fileName, Body: file}\n\n    S3.putObject(params, function (err, data) {\n      if (err) {\n        console.log(err)\n        if (callback) {\n          return callback(err)\n        }\n\n      } else {\n        if (callback) {\n          return callback(null, {\n            key: fileName\n          })\n        }\n\n      }\n\n    })\n  }\n\n  createFileName (backup, ext = 'tar') {\n    let names = []\n    let space = '---'\n    let underSpace = '___'\n\n    let snapshot = backup.snapshot ? backup.snapshot : 'null'\n    snapshot = _.replace(snapshot, /---/g, ' ')\n    snapshot = _.replace(snapshot, /___/g, ' ')\n    snapshot = _.replace(snapshot, /\\//g, ' ')\n    snapshot = _.trim(snapshot)\n\n    const id = _.get(backup, 'id', uuid())\n    names.push('snapshot' + space + (snapshot))\n    names.push('backupType' + space + backup.backupType)\n    names.push('manually' + space + (backup.manually ? 'true' : 'false'))\n    names.push('createdAt' + space + moment(backup.createdAt).unix())\n    names.push(`id${space}${id}`)\n    names.push('ext' + space + ext + underSpace)\n    return _.join(names, underSpace) + '.' + ext\n\n  }\n\n  getObjectStructFromFileName (filename) {\n\n    let space = '---'\n    let underSpace = '___'\n\n    let splitUnderScore = _.split(filename, underSpace)\n    let snapshot = splitUnderScore && splitUnderScore[0] ? _.split(splitUnderScore[0], space) : null\n    let backupType = splitUnderScore && splitUnderScore[1] ? _.split(splitUnderScore[1], space) : null\n    let manually = splitUnderScore && splitUnderScore[2] ? _.split(splitUnderScore[2], space) : null\n    let createdAt = splitUnderScore && splitUnderScore[3] ? _.split(splitUnderScore[3], space) : null\n    let id = splitUnderScore && splitUnderScore[4] ? _.split(splitUnderScore[4], space) : null\n\n    return {\n      id: _.get(id, '[1]', uuid()),\n      key: filename,\n      snapshot: snapshot && snapshot[1] && snapshot[1] && snapshot[1] !== 'null' ? snapshot[1] : '',\n      backupType: backupType && backupType[1] ? backupType[1] : null,\n      manually: manually && manually[1] === 'true' ? true : false,\n      createdAt: createdAt && createdAt[1] ? moment.unix(createdAt[1]).toDate() : null,\n      size: 0,\n      tag: null,\n    }\n  }\n\n  compress (pathToArchive, directoryPath, callback) {\n\n    let pack = tar.pack(directoryPath).pipe(fs.createWriteStream(pathToArchive))\n\n    pack.on('finish', (code) => {\n      console.log('Extract is finish')\n      return callback(null, true)\n    })\n    pack.on('error', (err) => {\n      if (err) {\n        return callback(err)\n      } else {\n        return callback(new Error('Compress is error'))\n      }\n    })\n  }\n\n  extract (pathToArchive, directoryPath, callback) {\n\n    let extractProcess = fs.createReadStream(pathToArchive).pipe(tar.extract(directoryPath))\n    extractProcess.on('finish', (code) => {\n      console.log('Extract is finish')\n      return callback(null, true)\n    })\n    extractProcess.on('error', (err) => {\n      if (err) {\n        return callback(err)\n      } else {\n        return callback(new Error('Extract is error'))\n      }\n    })\n\n  }\n}"]}